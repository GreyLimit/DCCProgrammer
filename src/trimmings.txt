
/*
 *	Display an expanded enumeration value.
 */
static void printf_definition( ENUMERATIONS *ptr, int read_write ) {
	int	i;

	assert( ptr != NULL );

	if( read_write ) {
		printf( "  " );
		if( ptr->exclusive ) {
			printf( "(%s", ptr->name );
			for( i = 0; i < ptr->values; i++ ) printf( "%c%s", (( i == 0 )? ':': ','), ptr->value[ i ].name );
			printf( ")" );
		}
		else {
			printf( "[%s", ptr->name );
			for( i = 0; i < ptr->values; i++ ) printf( "%c%s", (( i == 0 )? ':': '|'), ptr->value[ i ].name );
			printf( "]" );
		}
	}
}
static void printf_enumeration( ENUMERATIONS *ptr, int value, int read_write ) {
	int	i, j;

	assert( ptr != NULL );
	assert( ptr->name != NULL );
	assert(( ptr->values > 0 )&&( ptr->values <= ENUMERATIONS_LIMIT ));

	if( ptr->exclusive ) {
		for( i = 0; i < ptr->values; i++ ) {

			assert( ptr->value[ i ].name != NULL );

			if( ptr->value[ i ].value == value ) {
				printf( "%s", ptr->value[ i ].name );
				printf_definition( ptr, read_write );
				return;
			}
		}
		printf( "%d", value );
		if( option_flags & OPT_VERY_VERBOSE ) printf_definition( ptr, read_write );
		return;
	}
	j = FALSE;
	for( i = 0; i < ptr->values; i++ ) {

		assert( ptr->value[ i ].name != NULL );

		if(( value & ptr->value[ i ].value ) == ptr->value[ i ].value ) {
			if( j ) printf( "|" );
			printf( "%s", ptr->value[ i ].name );
			value &= ~ptr->value[ i ].value;
			j = TRUE;
		}
	}
	if( value != 0 ) {
		if( j ) printf( "|" );
		printf( "%d", value );
	}
	if( option_flags & OPT_VERY_VERBOSE ) printf_definition( ptr, read_write );
}



/*
 *	Display the content of an array element by element.
 */
static void printf_array( char *name, BINARY_VALUE *value ) {
	int	i, j, k, *v, mi, ma, ra, st;

	assert( value->elements > 0 );

	/* Temp array for high speed access to values */
	v = (int *)alloca( sizeof( int ) * value->elements );
	/* Initial minimum and maximum values */
	mi = 256;
	ma = -1;

	/*
	 *	Print out table
	 */
	printf( " %d item array:", value->elements );
	for( i = 0; i < value->elements; i++ ) {
		v[ i ] = read_binary_value( value, i );
		printf( "\n%s[%d] = %d", name, i+1, v[ i ]);
		if( v[ i ] < mi ) mi = v[ i ];
		if( v[ i ] > ma ) ma = v[ i ];
	}
	if( value->elements > 2 ) {
		/*
		 *	Print out graph
		 */
		ra = ma - mi;
		if(( st = ra / value->elements ) == 0 ) st = 1;
		ra = value->elements * st;
		for( i = value->elements-1; i >= 0; i-- ) {
			j = mi + i * st;
			printf( "\n%3d|", j );
			for( k = 0; k < value->elements; k++ ) {
				if( v[ k ] >= j ) {
					printf( "*" );
					v[ k ] = ERROR;
				}
				else {
					if((( i % 5 ) == 0 )&&(( k % 5 ) == 0 )) {
						printf( "." );
					}
					else {
						printf( " " );
					}
				}
			}
		}
		printf( "\n   +" );
		for( i = 0; i < value->elements; i++ ) printf( "-" );
	}
}







			if( mask != 0xff ) {
				printf( "set cv%d = %d%c%d\n", cv, (int)value, MASK_SEPARATOR, (int)mask );
			}
			else {
				printf( "set cv%d = %d\n", cv, (int)value );
			}





			printf( "get cv%d\n", cv );



